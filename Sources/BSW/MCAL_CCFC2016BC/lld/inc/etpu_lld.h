/**************************************************************************** 
* 
* Copyright (c) 2023  C*Core -   All Rights Reserved  
* 
* THIS SOFTWARE IS DISTRIBUTED "AS IS," AND ALL WARRANTIES ARE DISCLAIMED, 
* INCLUDING MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
* 
* PROJECT     : CCFC2016BC           
* DESCRIPTION : etpu code 
* HISTORY     : Initial version.
* @file     etpu_lld.h
* @version  1.4
* @date     2023 - 06 - 13
* @brief    Initial version.
*
*****************************************************************************/

#ifndef ETPU_LLD_H
#define ETPU_LLD_H
/* our private header file(generated by eTPU GCT) */
#include "CCFC2016BC.h"

#include "typedefs.h"

#include "ccfc2016bc_vars.h"         /* Processor dependent variables */
/* eTPU function set used */
#include "etpu_set.h"
/***************************************************************************
* @brief   Channel number expressed by(engine, channel)
* @note    All channel numbers for both eTPUs are absolute.
*          eTPU_A has channels 0 - 31 and eTPU_B has channels 64 - 95.
*******************************************************************************/
#define FS_ETPU_ENGINE_CHANNEL(x, y)(((x) - 1)*64 + y)

/***************************************************************************
* @brief   Transformation from absolute channel number to link register encoding
*******************************************************************************/
#define FS_ETPU_CHANNEL_TO_LINK(x) ((x) + 64)

#ifndef TRUE
#define TRUE  1
#endif

#ifndef FALSE
#define FALSE 0
#endif

/** @brief   Pointer to the first free parameter in eTPU DATA RAM */
extern uint32_t *fs_free_param;

/** @brief   Access to eTPU registers' structure */
extern struct eTPU_struct *eTPU;

/*******************************************************************************
* Type Definitions
*******************************************************************************/
typedef uint32_t ufract24_t;
typedef int32_t fract24_t;
typedef uint32_t uint24_t;
typedef int32_t int24_t;

/* Configuration structure */
struct etpu_config_t{
    uint32_t mcr;
    uint32_t misc;
    uint32_t ecr_a;
    uint32_t tbcr_a;
    uint32_t stacr_a;
    uint32_t ecr_b;
    uint32_t tbcr_b;
    uint32_t stacr_b;
    uint32_t wdtr_a;
    uint32_t wdtr_b;
};

/*******************************************************************************
* Definition of Terms
*******************************************************************************/
/* Channel Priority values used by several function APIs */
#define FS_ETPU_PRIORITY_HIGH       0x3U
#define FS_ETPU_PRIORITY_MIDDLE     0x2U
#define FS_ETPU_PRIORITY_LOW        0x1U
#define FS_ETPU_PRIORITY_DISABLE    0x0U
#define FS_ETPU_PIN_HIGH            1U
#define FS_ETPU_PIN_LOW             0U

/* eTPU timebases */
#define FS_ETPU_TCR1                0U
#define FS_ETPU_TCR2                1U
#define FS_ETPU_TCR1_A              0U
#define FS_ETPU_TCR2_A              1U
#define FS_ETPU_TCR1_B              0U
#define FS_ETPU_TCR2_B              1U

/* MCR - Module Configuration Register */
#define FS_ETPU_MISC_ENABLE         0x00000200U /* Code RAM MISC Enable */
#define FS_ETPU_MISC_DISABLE        0x00000000U
#define FS_ETPU_VIS_ON              0x00000040U /* Code RAM Visibility */
#define FS_ETPU_VIS_OFF             0x00000000U
#define FS_ETPU_GLOBAL_TIMEBASE_ENABLE  0x00000001U /* Global Time Base Enable */
#define FS_ETPU_GLOBAL_TIMEBASE_DISABLE 0x00000000U
#define FS_ETPU_SDM_READ_ERROR          0x40000000U  /* eTPU2 only */
#define FS_ETPU_WATCHDOG_TIMEOUT_A      0x20000000U  /* eTPU2 only */
#define FS_ETPU_WATCHDOG_TIMEOUT_B      0x10000000U  /* eTPU2 only */
#define FS_ETPU_MICROCODE_GLOBAL_EX_A   0x08000000U
#define FS_ETPU_MICROCODE_GLOBAL_EX_B   0x04000000U
#define FS_ETPU_ILLEGAL_INSTRUCTION_A   0x02000000U
#define FS_ETPU_ILLEGAL_INSTRUCTION_B   0x01000000U
#define FS_ETPU_SHARED_SUBSYS_ACC_ERR   0x00800000U  /* eTPU2 only */
#define FS_ETPU_SCM_MISC_FLAG           0x00000400U
#define FS_ETPU_SCM_READ_ERROR          0x00000100U  /* eTPU2 only */

/* ECR - Engine Configuration Register */
#define FS_ETPU_FILTER_CLOCK_DIV2       0x00000000U /* Filter Prescaler Clock */
#define FS_ETPU_FILTER_CLOCK_DIV4       0x00010000U /* Control                */
#define FS_ETPU_FILTER_CLOCK_DIV8       0x00020000U
#define FS_ETPU_FILTER_CLOCK_DIV16      0x00030000U
#define FS_ETPU_FILTER_CLOCK_DIV32      0x00040000U
#define FS_ETPU_FILTER_CLOCK_DIV64      0x00050000U
#define FS_ETPU_FILTER_CLOCK_DIV128     0x00060000U
#define FS_ETPU_FILTER_CLOCK_DIV256     0x00070000U
#define FS_ETPU_FCSS_DIV2               0x00000000U /* Filter Clock Source Selection */
#define FS_ETPU_FCSS_DIV1               0x00080000U /* eTPU2 only */
#define FS_ETPU_CHAN_FILTER_2SAMPLE     0x00000000U /* Channel filter mode */
#define FS_ETPU_CHAN_FILTER_3SAMPLE     0x00008000U
#define FS_ETPU_CHAN_FILTER_CONT        0x0000C000U
#define FS_ETPU_CHAN_FILTER_BYPASS      0x00004000U /* eTPU2 only */
#define FS_ETPU_ENGINE_ENABLE           0x00000000U  /* Low Power Stop Bit */
#define FS_ETPU_ENGINE_DISABLE          0x40000000U
#define FS_ETPU_PRIORITY_PASSING_ENABLE     0x00000000U /* Scheduler Priority Passing */
#define FS_ETPU_PRIORITY_PASSING_DISABLE    0x00000080U /* eTPU2 only */

/* TBCR - Time Base Configuration Register */
#define FS_ETPU_TCRCLK_MODE_2SAMPLE     0x00000000U /* TCRCLK Signal Filter Control*/
#define FS_ETPU_TCRCLK_MODE_INTEGRATION 0x10000000U
#define FS_ETPU_TCRCLK_INPUT_DIV2CLOCK  0x00000000U
#define FS_ETPU_TCRCLK_INPUT_CHANCLOCK  0x08000000U
#define FS_ETPU_TCR1CTL_TCRCLK         0x00000000U  /* TCR1 Clock/Gate Control */
#define FS_ETPU_TCR1CTL_DIV2           0x00008000U
#define FS_ETPU_TCR1CS_DIV2            0x00000000U  /* TCR1 Clock Source */
#define FS_ETPU_TCR1CS_DIV1            0x00002000U  /* eTPU2 only */
#define FS_ETPU_ANGLE_MODE_ENABLE      0x02000000U   /* Angle Mode */
#define FS_ETPU_ANGLE_MODE_DISABLE     0x00000000U
#define FS_ETPU_ANGLE_MODE_ENABLE_CH1  0x04000000U   /* eTPU2 only */
#define FS_ETPU_ANGLE_MODE_ENABLE_CH2  0x06000000U   /* eTPU2 only */
#define FS_ETPU_TCR2CTL_GATEDDIV8      0x00000000U   /* TCR2 Clock/Gate Control */
#define FS_ETPU_TCR2CTL_RISE           0x20000000U
#define FS_ETPU_TCR2CTL_FALL           0x40000000U
#define FS_ETPU_TCR2CTL_RISEFALL       0x60000000U
#define FS_ETPU_TCR2CTL_DIV8           0x80000000U
#define FS_ETPU_TCR1_PRESCALER(x)     (((x) - 1U) & 0xFFU) /* TCR1 Prescaler, x = 1 to 256 */
#define FS_ETPU_TCR2_PRESCALER(x)     ((((x) - 1U) & 0x3FU) << 16U) /* TCR2 Prescaler, x = 1 to 64 */

/* STACR - Shared Time And Angle Count Register */
#define FS_ETPU_TCR1_STAC_ENABLE       0x80000000U   /* TCR1 Resource Enable */
#define FS_ETPU_TCR1_STAC_DISABLE      0x00000000U
#define FS_ETPU_TCR1_STAC_CLIENT       0x00000000U   /* TCR1 Resource Control */
#define FS_ETPU_TCR1_STAC_SERVER       0x40000000U
#define FS_ETPU_TCR1_STAC_SRVSLOT(x)  (((x) & 0xFU) << 16) /* TCR1 Server Slot, x = 0 to 3 */
#define FS_ETPU_TCR2_STAC_ENABLE       0x00008000U   /* TCR2 Resource Enable */
#define FS_ETPU_TCR2_STAC_DISABLE      0x00000000U
#define FS_ETPU_TCR2_STAC_CLIENT       0x00000000U   /* TCR2 Resource Control */
#define FS_ETPU_TCR2_STAC_SERVER       0x00004000U
#define FS_ETPU_TCR2_STAC_SRVSLOT(x)  ((x) & 0xFU)  /* TCR2 Server Slot, x = 0 to 3 */

/* WDTR - Watchdog Timer Register - eTPU2 only */
#define FS_ETPU_WDM_DISABLED            0x00000000U /* Watchdog Mode */
#define FS_ETPU_WDM_THREAD_LEN          0x80000000U /* eTPU2 only */
#define FS_ETPU_WDM_BUSY_LEN            0xC0000000U /* eTPU2 only */
#define FS_ETPU_WDTR_WDCNT(x)          ((x) & 0xFFFFU) /* Watchdog Count - eTPU2 only */

/* CxCR - Channel x Configuration Register */
#define FS_ETPU_INTERRUPT_ENABLE       0x80000000U  /* Channel Interrupt Enable */
#define FS_ETPU_INTERRUPT_DISABLE      0x00000000U
#define FS_ETPU_DMA_ENABLE             0x40000000U  /* Data Transfer Request Enable*/
#define FS_ETPU_DMA_DISABLE            0x00000000U
#define FS_ETPU_ENTRY_TABLE_STANDARD   0x00000000U  /* Entry Table Condition Select*/
#define FS_ETPU_ENTRY_TABLE_ALTERNATE  0x01000000U
#define FS_ETPU_ENTRY_TABLE_PIN_INPUT  0x00000000U  /* Entry Table Pin Direction*/
#define FS_ETPU_ENTRY_TABLE_PIN_OUTPUT 0x02000000U
#define FS_ETPU_OUTPUT_DISABLE_OFF     0x00000000U  /* Output Disable */
#define FS_ETPU_OUTPUT_DISABLE_LOW     0x0000C000U
#define FS_ETPU_OUTPUT_DISABLE_HIGH    0x00008000U

/* eTPU error return codes */
#define FS_ETPU_ERROR_NONE             0U
#define FS_ETPU_ERROR_MALLOC           1U
#define FS_ETPU_ERROR_FREQ             2U
#define FS_ETPU_ERROR_VALUE            3U
#define FS_ETPU_ERROR_CODESIZE         4U
#define FS_ETPU_ERROR_VIS_BIT_NOT_SET  5U
#define FS_ETPU_ERROR_ADDRESS          6U
#define FS_ETPU_ERROR_TIMING           7U

/**************************************************************************
 * general macros
 **************************************************************************/
#define FS_ETPU_TCR1_STAC_SRVSLOT(x)(((x) & 0xFU) << 16)
#define FS_ETPU_TCR2_STAC_SRVSLOT(x)((x) & 0xFU)
#define FS_ETPU_CHANNEL_FUNCTION(x) ((x) & 0x1FU)
#define FS_ETPU_CHANNEL_PARAMS(x)   ((x) & 0x7FU)
#define FS_ETPU_FUNCTION_MODE(x)    ((x) & 0x3U)
#define FS_ETPU_ENTRY_TABLE_ADDR    (((FS_ETPU_ENTRY_TABLE) >> 11) & 0x1FU)
#define FS_ETPU_FUNCTION_MODE_00     FS_ETPU_FUNCTION_MODE(0)
#define FS_ETPU_FUNCTION_MODE_01     FS_ETPU_FUNCTION_MODE(1)
#define FS_ETPU_FUNCTION_MODE_10     FS_ETPU_FUNCTION_MODE(2)
#define FS_ETPU_FUNCTION_MODE_11     FS_ETPU_FUNCTION_MODE(3)
#define FS_ETPU_HSR_0              (0)
#define FS_ETPU_HSR_1              (1)
#define FS_ETPU_HSR_2              (2)
#define FS_ETPU_HSR_3              (3)
#define FS_ETPU_HSR_4              (4)
#define FS_ETPU_HSR_5              (5)
#define FS_ETPU_HSR_6              (6)
#define FS_ETPU_HSR_7              (7)
#define ETPU_ENGINE_A_CHANNEL(x)   (x)
#define ETPU_ENGINE_B_CHANNEL(x)   ((x) + 64)
#define ETPU_CHAN_NOT_USED         (- 1)

/**************************************************************************
 * define functions to channels
 **************************************************************************/
#define PWM0_CHANNEL    ETPU_ENGINE_A_CHANNEL(0)
#define GPIO1_CHANNEL   ETPU_ENGINE_A_CHANNEL(1)
#define GPIO2_CHANNEL   ETPU_ENGINE_A_CHANNEL(2)

/**************************************************************************
 * Interrupt Enable, DMA Enable and Output Disable options
 * filled accodring to the user settings
 **************************************************************************/
#define ETPU_CIE_A      0x00000004
#define ETPU_DTRE_A     0x00000004
#define ETPU_ODIS_A     0x00000000
#define ETPU_OPOL_A     0x00000000
#define ETPU_CIE_B      0x00000000
#define ETPU_DTRE_B     0x00000000
#define ETPU_ODIS_B     0x00000000
#define ETPU_OPOL_B     0x00000000
#define ETPUA_IO0       27U
#define ETPUA_IO1       28U
#define ETPUA_IO2       29U
#define ETPUA_IO3       30U
#define ETPUA_IO4       31U
/* eTPU Module Initialization */
uint32_t fs_etpu_init(struct etpu_config_t p_etpu_config, uint32_t *code, uint32_t code_size, uint32_t *globals, uint32_t globals_size);
uint32_t fs_etpu2_init(struct etpu_config_t p_etpu_config, uint32_t engine_mem_size);

/* eTPU Channel Initialization */
uint32_t *fs_etpu_chan_init(uint8_t channel, uint8_t function, uint8_t mode, uint8_t hsr, uint8_t num_param,
    uint32_t config, uint32_t *func_frame);
uint32_t *fs_etpu_malloc(uint16_t num_bytes);
uint32_t *fs_etpu_malloc2(uint8_t channel, uint16_t num_bytes);

/* Run - Time eTPU Module Control */
void fs_timer_start(void);
uint32_t fs_etpu_get_global_exceptions(void);
void fs_etpu_clear_global_exceptions(void);
uint32_t fs_etpu_get_global_error(void);
void fs_etpu_set_interrupt_mask_a(uint32_t mask);
void fs_etpu_set_interrupt_mask_b(uint32_t mask);
void fs_etpu_set_dma_mask_a(uint32_t mask);
void fs_etpu_set_dma_mask_b(uint32_t mask);
void fs_etpu_set_output_disable_mask_a(uint32_t mask, uint32_t polarity);
void fs_etpu_set_output_disable_mask_b(uint32_t mask, uint32_t polarity);

/* Run - Time eTPU Channel Control */
uint8_t fs_etpu_get_hsr(uint8_t channel);
void fs_etpu_set_hsr(uint8_t channel, uint8_t hsr);
void fs_etpu_enable(uint8_t channel, uint8_t priority);
void fs_etpu_disable(uint8_t channel);
void fs_etpu_interrupt_enable(uint8_t channel);
void fs_etpu_interrupt_disable(uint8_t channel);
uint8_t fs_etpu_get_chan_interrupt_flag(uint8_t channel);
void fs_etpu_clear_chan_interrupt_flag(uint8_t channel);
uint8_t fs_etpu_get_chan_interrupt_overflow_flag(uint8_t channel);
void fs_etpu_clear_chan_interrupt_overflow_flag(uint8_t channel);
void fs_etpu_dma_enable(uint8_t channel);
void fs_etpu_dma_disable(uint8_t channel);
uint8_t fs_etpu_get_chan_dma_flag(uint8_t channel);
void fs_etpu_clear_chan_dma_flag(uint8_t channel);
uint8_t fs_etpu_get_chan_dma_overflow_flag(uint8_t channel);
void fs_etpu_clear_chan_dma_overflow_flag(uint8_t channel);

/* eTPU DATA RAM Access */
uint32_t *fs_etpu_data_ram(uint8_t channel);
uint32_t fs_etpu_get_chan_local_32(uint8_t channel, uint32_t offset);
uint24_t fs_etpu_get_chan_local_24(uint8_t channel, uint32_t offset);
int24_t fs_etpu_get_chan_local_24s(uint8_t channel, uint32_t offset);
uint16_t fs_etpu_get_chan_local_16(uint8_t channel, uint32_t offset);
uint8_t  fs_etpu_get_chan_local_8(uint8_t channel, uint32_t offset);
void fs_etpu_set_chan_local_32(uint8_t channel, uint32_t offset, uint32_t value);
void fs_etpu_set_chan_local_24(uint8_t channel, uint32_t offset, uint24_t value);
void fs_etpu_set_chan_local_16(uint8_t channel, uint32_t offset, uint16_t value);
void fs_etpu_set_chan_local_8(uint8_t channel, uint32_t offset, uint8_t value);
uint32_t fs_etpu_get_global_32(uint32_t offset);
int24_t fs_etpu_get_global_24s(uint32_t offset);
uint24_t fs_etpu_get_global_24(uint32_t offset);
uint16_t fs_etpu_get_global_16(uint32_t offset);
uint8_t  fs_etpu_get_global_8(uint32_t offset);
void fs_etpu_set_global_32(uint32_t offset, uint32_t value);
void fs_etpu_set_global_24(uint32_t offset, uint24_t value);
void fs_etpu_set_global_16(uint32_t offset, uint16_t value);
void fs_etpu_set_global_8(uint32_t offset, uint8_t value);
uint32_t fs_etpu_coherent_read_24(uint8_t channel, uint32_t offset1, uint32_t offset2, int32_t *value1, int32_t *value2);
uint32_t fs_etpu_coherent_read_32(uint8_t channel, uint32_t offset1, uint32_t offset2, uint32_t *value1, uint32_t *value2);
uint32_t fs_etpu_coherent_write_24(uint8_t channel, uint32_t offset1, uint32_t offset2, int32_t value1, int32_t value2);
uint32_t fs_etpu_coherent_write_32(uint8_t channel, uint32_t offset1, uint32_t offset2, uint32_t value1, uint32_t value2);
uint8_t fs_etpu_get_chan_interrupt_oveflow_flag(uint8_t channel);
uint8_t fs_etpu_get_chan_dma_oveflow_flag(uint8_t channel);
void fs_etpu_clear_chan_dma_oveflow_flag(uint8_t channel);


/* eTPU Load Evaluation */
uint24_t fs_etpu_get_idle_cnt_a(void);
uint24_t fs_etpu_get_idle_cnt_b(void);
void fs_etpu_clear_idle_cnt_a(void);
void fs_etpu_clear_idle_cnt_b(void);

/* Others */
void my_system_etpu_start(void);
void ETPU_SIU_Config(uint8_t Pin_Num, uint16_t Pin_Config);
void ETPU_CHANNEL_ISR_Enable(uint8_t channel_num);

#endif
